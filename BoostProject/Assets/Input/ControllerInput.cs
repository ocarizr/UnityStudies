// GENERATED AUTOMATICALLY FROM 'Assets/Input/ControllerInput.inputactions'

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace AutoGenerated.Input
{
    public class @ControllerInput : IInputActionCollection, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ControllerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerInput"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""9b9738d0-3de2-4d56-b36d-e49e78d0a7e9"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7c0f1f08-4c6c-4370-ba58-74773710a7af"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6d780920-a802-4274-b1e5-10f7b0b0772e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""d539bca2-ef4e-4d0c-99f5-763f24dc846a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1badb3e4-f658-41a2-994e-87839bd0c195"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f8a3a209-c9a8-48f4-a10c-29dc9073e625"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""f6728f01-22d5-4eeb-af3b-6afdb2fade23"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9bddf628-4103-402a-8385-7112846b5bca"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f5e8a4dd-b926-432e-89ec-94a9b9b4c1b1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa1f706f-d645-4594-875c-a63e49ecd80a"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""7803274e-ac98-47f7-a808-f544e55ee354"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""488d098b-6c92-4580-9694-ba14273f21b1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b0af358b-bc5c-40e3-8de9-f39437eb9502"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""ff1cbfe3-caee-4e5b-9c3e-94ddc049e71f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fb5736ff-06a7-466c-a88c-d999380d46a5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5d3ef81d-84db-42ab-863c-546d3830ba0d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""271e26ca-8a7e-4130-ba94-70dee41984f8"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Controller
            m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
            m_Controller_Thrust = m_Controller.FindAction("Thrust", throwIfNotFound: true);
            m_Controller_Rotation = m_Controller.FindAction("Rotation", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        // Controller
        private readonly InputActionMap m_Controller;
        private IControllerActions m_ControllerActionsCallbackInterface;
        private readonly InputAction m_Controller_Thrust;
        private readonly InputAction m_Controller_Rotation;
        public struct ControllerActions
        {
            private @ControllerInput m_Wrapper;
            public ControllerActions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Thrust => m_Wrapper.m_Controller_Thrust;
            public InputAction @Rotation => m_Wrapper.m_Controller_Rotation;
            public InputActionMap Get() { return m_Wrapper.m_Controller; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
            public void SetCallbacks(IControllerActions instance)
            {
                if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
                {
                    @Thrust.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnThrust;
                    @Thrust.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnThrust;
                    @Thrust.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnThrust;
                    @Rotation.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnRotation;
                }
                m_Wrapper.m_ControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Thrust.started += instance.OnThrust;
                    @Thrust.performed += instance.OnThrust;
                    @Thrust.canceled += instance.OnThrust;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                }
            }
        }
        public ControllerActions @Controller => new ControllerActions(this);
        public interface IControllerActions
        {
            void OnThrust(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
        }
    }
}
