using UnityEngine.InputSystem;
using Monobehaviours.Abstracts;
using AutoGenerated.Input;

namespace Monobehaviours.Controllers
{
    public class RocketController : Controller
    {
        private ControllerInput _input;

        private void Awake()
        {
            _input = new ControllerInput();
        }

        private void OnEnable()
        {
            if (_thrustCommand is { }) _input.Controller.Thrust.performed += OnThrust;
            if(_rotateCommand is { }) _input.Controller.Rotation.performed += OnRotate;

            _input.Enable();
        }

        private void OnDisable()
        {
            if (_thrustCommand is { }) _input.Controller.Thrust.performed -= OnThrust;
            if (_rotateCommand is { }) _input.Controller.Rotation.performed -= OnRotate;

            _input.Disable();
        }

        private void OnThrust(InputAction.CallbackContext input)
        {
            ThrustInput = input.ReadValue<float>();
            _thrustCommand!.Execute();
        }

        private void OnRotate(InputAction.CallbackContext input)
        {
            RotateInput = input.ReadValue<float>();
            _rotateCommand!.Execute();
        }
    }
}
